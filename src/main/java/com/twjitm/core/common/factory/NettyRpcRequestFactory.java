package com.twjitm.core.common.factory;import com.twjitm.core.common.netstack.entity.rpc.NettyRpcRequestMessage;import com.twjitm.core.utils.logs.LoggerUtils;import org.apache.log4j.Logger;import org.springframework.stereotype.Service;import java.util.UUID;/** * @author EGLS0807 - [Created on 2018-08-20 14:49] * @company http://www.g2us.com/ * @jdk java version "1.8.0_77" */public class NettyRpcRequestFactory {    private Logger logger = LoggerUtils.getLogger(NettyRpcRequestFactory.class);    public NettyRpcRequestMessage createNettyRpcRequestMessage(String className, String methodName, Object[] args){        NettyRpcRequestMessage request = new NettyRpcRequestMessage();        request.setRequestId(UUID.randomUUID().toString());        request.setClassName(className);        request.setMethodName(methodName);        request.setParameters(args);        Class[] parameterTypes = new Class[args.length];        // Get the right class type        for (int i = 0; i < args.length; i++) {            parameterTypes[i] = getClassType(args[i]);        }        request.setParameterTypes(parameterTypes);        if(logger.isDebugEnabled()) {            logger.debug(methodName);            logger.debug(className);            logger.info(args);            for (int i = 0; i < parameterTypes.length; ++i) {                logger.debug(parameterTypes[i].getName());            }            for (int i = 0; i < args.length; ++i) {                logger.debug(args[i].toString());            }        }        return request;    }    private Class getClassType(Object arg) {        Class<?> classType = arg.getClass();        String typeName = classType.getName();        switch (typeName){            case "java.lang.Integer":                return Integer.TYPE;            case "java.lang.Long":                return Long.TYPE;            case "java.lang.Float":                return Float.TYPE;            case "java.lang.Double":                return Double.TYPE;            case "java.lang.Character":                return Character.TYPE;            case "java.lang.Boolean":                return Boolean.TYPE;            case "java.lang.Short":                return Short.TYPE;            case "java.lang.Byte":                return Byte.TYPE;        }        return classType;    }}