package com.twjitm.core.common.service.rpc.service;import com.twjitm.core.common.config.global.NettyGameServiceConfigService;import com.twjitm.core.common.service.IService;import com.twjitm.core.common.service.rpc.client.proxy.INettyAsyncRpcProxy;import com.twjitm.core.common.service.rpc.client.proxy.NettyAsyncRpcProxy;import com.twjitm.core.common.service.rpc.client.proxy.NettyObjectProxy;import com.twjitm.core.spring.SpringServiceManager;import org.springframework.stereotype.Service;import java.lang.reflect.Proxy;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;/** * @author EGLS0807 - [Created on 2018-08-20 12:10] * @company http://www.g2us.com/ * @jdk java version "1.8.0_77" */@Servicepublic class NettyRpcProxyService implements IService {    private static ThreadPoolExecutor threadPoolExecutor;    @SuppressWarnings("unchecked")    public <T> T createProxy(Class<T> interfaceClass) {        NettyGameServiceConfigService gameServerConfigService = SpringServiceManager.getSpringLoadService().getNettyGameServiceConfigService();        int timeOut = gameServerConfigService.getNettyGameServiceConfig().getRpcTimeOut();        return (T) Proxy.newProxyInstance(                interfaceClass.getClassLoader(),                new Class<?>[]{interfaceClass},                new NettyObjectProxy<T>(interfaceClass, timeOut)        );    }    public <T> INettyAsyncRpcProxy createAsync(Class<T> interfaceClass) {        return new NettyAsyncRpcProxy<>(interfaceClass);    }    @Override    public String getId() {        return NettyRpcProxyService.class.getSimpleName();    }    @Override    public void startup() throws Exception {        NettyGameServiceConfigService gameServerConfigService = SpringServiceManager.getSpringLoadService().getNettyGameServiceConfigService();        int threadSize = gameServerConfigService.getNettyGameServiceConfig().getRpcSendProxyThreadSize();        threadPoolExecutor = new ThreadPoolExecutor(threadSize, threadSize, 600L, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(65536));    }    @Override    public void shutdown() throws Exception {        threadPoolExecutor.shutdown();    }    public void submit(Runnable task) {        threadPoolExecutor.submit(task);    }}