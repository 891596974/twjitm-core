package com.twjitm.core.common.service.rpc.client.proxy;import com.twjitm.core.common.factory.NettyRpcRequestFactory;import com.twjitm.core.common.netstack.entity.rpc.NettyRpcRequestMessage;import com.twjitm.core.common.service.rpc.client.AbstractNettyRpcConnectManager;import com.twjitm.core.common.service.rpc.client.NettyRPCFuture;import com.twjitm.core.common.service.rpc.client.NettyRpcContextHolder;import com.twjitm.core.common.service.rpc.client.NettyRpcContextHolderObject;import com.twjitm.core.common.service.rpc.network.NettyRpcClient;import com.twjitm.core.common.service.rpc.service.NettyRpcClientConnectService;import com.twjitm.core.spring.SpringServiceManager;/** * @author EGLS0807 - [Created on 2018-08-20 14:46] * @company http://www.g2us.com/ * @jdk java version "1.8.0_77" * 异步rpc代理 */public class NettyAsyncRpcProxy<T> implements INettyAsyncRpcProxy {    private Class<T> clazz;    public NettyAsyncRpcProxy(Class<T> clazz) {        this.clazz = clazz;    }    @Override    public NettyRPCFuture call(String funcName, Object... args) {        NettyRpcContextHolderObject rpcContextHolderObject = NettyRpcContextHolder.getContext();        NettyRpcClientConnectService rpcClientConnectService = SpringServiceManager.getSpringLoadService().getNettyRpcClientConnectService();        AbstractNettyRpcConnectManager abstractRpcConnectManager = rpcClientConnectService.getNettyRpcConnectManager(rpcContextHolderObject.getNettyGameTypeEnum());        NettyRpcClient rpcClient = abstractRpcConnectManager.chooseNettyRpcClient(rpcContextHolderObject.getServiceId());        NettyRpcRequestFactory rpcRequestFactory = SpringServiceManager.getSpringLoadService().getNettyRpcRequestFactory();        NettyRpcRequestMessage request = rpcRequestFactory.createNettyRpcRequestMessage(this.clazz.getName(), funcName, args);        NettyRPCFuture rpcFuture = rpcClient.sendRequest(request);        return rpcFuture;    }}