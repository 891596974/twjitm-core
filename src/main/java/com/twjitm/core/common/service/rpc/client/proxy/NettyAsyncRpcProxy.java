package com.twjitm.core.common.service.rpc.client.proxy;import com.twjitm.core.common.factory.NettyRpcRequestFactory;import com.twjitm.core.common.netstack.entity.rpc.NettyRpcRequestMessage;import com.twjitm.core.common.service.rpc.client.AbstractNettyRpcConnectManager;import com.twjitm.core.common.service.rpc.client.NettyRPCFuture;import com.twjitm.core.common.service.rpc.client.NettyRpcContextHolder;import com.twjitm.core.common.service.rpc.client.NettyRpcContextHolderObject;import com.twjitm.core.common.service.rpc.network.NettyRpcClient;import com.twjitm.core.common.service.rpc.service.NettyRpcClientConnectService;import com.twjitm.core.spring.SpringServiceManager;/** * @author EGLS0807 - [Created on 2018-08-20 14:46] * @company http://www.g2us.com/ * @jdk java version "1.8.0_77" * 异步rpc代理 */public class NettyAsyncRpcProxy<T> implements INettyAsyncRpcProxy {    private Class<T> clazz;    public NettyAsyncRpcProxy(Class<T> clazz) {        this.clazz = clazz;    }    @Override    public NettyRPCFuture call(String funcName, Object... args) {        //获得一个持有对象        NettyRpcContextHolderObject rpcContextHolderObject = NettyRpcContextHolder.getContext();        //联合器服务类        NettyRpcClientConnectService rpcClientConnectService =                SpringServiceManager.getSpringLoadService().getNettyRpcClientConnectService();        //更具类型获取一个rpc联合管理器        AbstractNettyRpcConnectManager abstractRpcConnectManager                = rpcClientConnectService.getNettyRpcConnectManager(                        rpcContextHolderObject.getNettyGameTypeEnum());        //更具服务id，获得一个rpc客户端对象        NettyRpcClient rpcClient = abstractRpcConnectManager.getNettyRpcClientByServerId(                rpcContextHolderObject.getServiceId());        //获得一个rpc请求消息生产工厂        NettyRpcRequestFactory rpcRequestFactory =                SpringServiceManager.getSpringLoadService().getNettyRpcRequestFactory();        //构建一个rpc请求        NettyRpcRequestMessage request =                rpcRequestFactory.createNettyRpcRequestMessage(this.clazz.getName(), funcName, args);        //将消息发送出去        NettyRPCFuture rpcFuture = rpcClient.sendRequest(request);        return rpcFuture;    }}